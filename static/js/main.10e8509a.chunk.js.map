{"version":3,"sources":["App.js","index.js"],"names":["process","raw","data","readString","header","rows","slice","fips_idx","indexOf","first_date_index","dates","date_indices","keys","map","idx","fips_to_case_counts","filter","row","includes","forEach","fips","parseInt","date_idx","mergeInCaseCounts","caseData","features","feature","properties","GEOID10","mouseOver","event","target","setStyle","weight","color","dashArray","fillOpacity","mouseOut","onEachFeature","layer","on","mouseover","mouseout","App","useState","counties","setCounties","setDates","currentDate","setCurrentDate","sliderValue","setSliderValue","useEffect","a","counties_url","axios","get","res","length","counties_data","console","log","fetchData","className","Map","center","zoom","style","height","TileLayer","url","GeoJSON","d","date","fillColor","cases","opacity","id","type","min","max","value","onChange","val","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10e8509a.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Map, TileLayer, GeoJSON } from \"react-leaflet\";\nimport { readString } from \"react-papaparse\";\n\n// https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series\n// https://arc-garc.opendata.arcgis.com/datasets/dc20713282734a73abe990995de40497_68\n\nconst process = (raw) => {\n  let reader = readString(raw);\n  let data = reader.data;\n\n  let header = data[0];\n  let rows = data.slice(1);\n\n  let fips_idx = header.indexOf(\"FIPS\");\n  let first_date_index = header.indexOf(\"1/22/20\");\n\n  let dates = header.slice(first_date_index);\n  let date_indices = [...dates.keys()].map((idx) => idx + first_date_index);\n\n  const fips_to_case_counts = {};\n  rows\n    .filter((row) => row.includes(\"Georgia\"))\n    .forEach((row) => {\n      let fips = parseInt(row[fips_idx]);\n      fips_to_case_counts[fips] = {};\n      date_indices.forEach((date_idx) => {\n        fips_to_case_counts[fips][header[date_idx]] = row[date_idx];\n      });\n    });\n\n  const ret_val = {\n    fips_to_case_counts,\n    dates,\n  };\n\n  return ret_val;\n};\n\nconst mergeInCaseCounts = (data, caseData) => {\n  data.features.forEach((feature) => {\n    feature.properties[\"cases\"] = caseData[feature.properties.GEOID10];\n  });\n  return data;\n};\n\nconst getColor = (d) => {\n  return d > 1000\n    ? \"#800026\"\n    : d > 500\n    ? \"#BD0026\"\n    : d > 200\n    ? \"#E31A1C\"\n    : d > 100\n    ? \"#FC4E2A\"\n    : d > 50\n    ? \"#FD8D3C\"\n    : d > 20\n    ? \"#FEB24C\"\n    : d > 10\n    ? \"#FED976\"\n    : \"#FFEDA0\";\n};\n\nconst mouseOver = (event) => {\n  var layer = event.target;\n  layer.setStyle({\n    weight: 1,\n    color: \"#666\",\n    dashArray: \"1\",\n    fillOpacity: 0.9,\n  });\n};\n\nconst mouseOut = (event) => {\n  var layer = event.target;\n  layer.setStyle({\n    weight: 2,\n    color: \"white\",\n    dashArray: \"2\",\n    fillOpacity: 0.7,\n  });\n};\n\nconst onEachFeature = (feature, layer) => {\n  layer.on({\n    mouseover: mouseOver,\n    mouseout: mouseOut,\n  });\n};\n\nconst App = () => {\n  const [counties, setCounties] = useState();\n  const [dates, setDates] = useState();\n  const [currentDate, setCurrentDate] = useState();\n  const [sliderValue, setSliderValue] = useState(50);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const counties_url =\n        \"https://opendata.arcgis.com/datasets/dc20713282734a73abe990995de40497_68.geojson\";\n      const data_url =\n        \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv\";\n\n      try {\n        let res;\n\n        res = await axios.get(data_url);\n        let caseData = process(res.data);\n\n        setDates(caseData.dates);\n        setCurrentDate(caseData.dates[caseData.dates.length - 1]);\n        setSliderValue(caseData.dates.length);\n\n        res = await axios.get(counties_url);\n        let counties_data = mergeInCaseCounts(\n          res.data,\n          caseData[\"fips_to_case_counts\"]\n        );\n        setCounties(counties_data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const featureStyle = (feature) => {\n    let date = currentDate;\n    return {\n      fillColor: getColor(feature.properties.cases[date]),\n      weight: 2,\n      opacity: 0.5,\n      color: \"white\",\n      dashArray: \"2\",\n      fillOpacity: 0.7,\n    };\n  };\n\n  const sliderChange = (event) => {\n    let val = parseInt(event.target.value);\n    setSliderValue(val);\n    setCurrentDate(dates[val]);\n  };\n\n  if (!counties || !dates) return <div>loading...</div>;\n\n  return (\n    <div className=\"App\">\n      <Map center={[32.7656, -83.3]} zoom={8} style={{ height: \"1000px\" }}>\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n        <GeoJSON\n          data={counties}\n          style={featureStyle}\n          onEachFeature={onEachFeature}\n        />\n      </Map>\n      <input\n        id=\"dateSlider\"\n        type=\"range\"\n        min=\"0\"\n        max={dates.length - 1}\n        value={sliderValue}\n        onChange={sliderChange}\n      />\n      <div>\n        <strong>{currentDate}</strong>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}